# This script was made to plot data found in CSV-format measurement data files generated by PEC (tm) test equipment
# Written by Henrik Isaksson 2021-05-07
import os

import matplotlib.pyplot as plt
import pandas as pd
import PySimpleGUI as Sg
import time
import re

ignored_columns = ['Test', 'Cell', 'Rack', 'Shelf', 'Position', 'Cell ID', 'Load On time', 'Step Time (Seconds)']
#from tabulate import tabulate

# Pattern of characters allowed in file naming, used with regular expression (re)
name_pattern = '[^a-öA-Ö0-9_]'
df = pd.DataFrame
rows = 0
start = 0
stop = 0


# Locate first row of measurement data to be extracted
def find_header(file):
    r_ = 0
    with open(file, 'r') as cf:
        while True:
            r_ += 1
            line = cf.readline()
            if line.startswith("Test,"):
                for x in line.split(','):
                    if x.__contains__('Total Time'):
                        index_ = x
                        break
                return r_, index_


# Read CVS-file into DataFrame df
def file_to_df(_csv_file):
    r, index = find_header(_csv_file)
    df_ = pd.read_csv(_csv_file, skiprows=r - 1, index_col=index, usecols=lambda x: x not in ignored_columns)
    df_.rename(columns=lambda x: re.sub("\(", "[", re.sub("\)", "]", x)), inplace=True)
    return df_


def unit_list(x):
    if "[" in x:
        result = x.split("[")[1].split("]")[0]
    else:
        result = "Na"
    return result


def count_units(units):
    unit = units[0]
    n = 1
    for x in units[1:]:
        if x != unit:
            n += 1
            unit = x
    return n


def my_plot(_df, data):
    _df[data].plot()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


def muliplot(_df, data):
    units = list(map(unit_list, data))
    n = count_units(units)
    print(n)
    print(n//4 + n % 4)
    if n > 2:
        fig, axs = plt.subplots(nrows=n//4 + n % 4, ncols=2)
    else:
        fig, axs = plt.figure()
    m = [units.count(x) for x in units]
    print(m)
    nu = 0 #Number of units
    n = 0 #Row
    m = 0 #Column
    k = 0 #Number of plots
    u = units[0]
    second_y = False
    print(units)
    for i in range(len(units)):
        unit = units[i]
        if u != unit:
            if nu > 1:
                #Start new plotaxs
                if m == 1:
                    n += 1
                    m = 0
                else:
                    m += 1
                #Add to total number of plots
                k = i
                second_y = False
            else:
                second_y = True
            nu += 1
            unit = u
        print("n: {}, m: {}, nu: {}".format(n, m, nu))
        print(data[i-1])
        _df[data[i]].plot(ax=axs[n, m], secondary_y=second_y)
        plt.xticks(rotation=45)
        plt.tight_layout()

    plt.show()


# Single axis
def plot_to_file(filetype, _df, data, filename):
    _df[data].plot()
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(data[0] + "." + filetype, format=filetype)
    plt.close()


def export_data(filetype, _df, data, filename):
    tic = time.process_time()
    if filetype == "excel":
        filename = filename + '.xlsx'
        _df[data].to_excel(filename)
    elif filetype == "text":
        filename = filename + '.txt'
        string_ = _df[data].to_string()
        with open(filename, 'w') as f:
            f.write(string_)
    elif filetype == 'html':
        filename = filename + '.html'
        html = _df[data].to_html()
        with open(filename, 'w') as f:
            f.write(html)
    toc = time.process_time()
    print("Exporten tog: ", (toc - tic), " sekunder")


def main_window():
    global df
    right_column = []
    main_layout = [[Sg.Text("Open CSV file"), Sg.Input(key='-FILE-', visible=False, enable_events=True),
                    Sg.FileBrowse(file_types=(('ALL Files', '*.csv'),),
                                  initial_folder='/home/henrik/Dokument/Intertek/Mätfiler/SBT8050/')],
                   [Sg.Text("Datakolumner"), Sg.Button("Markera alla", k='-ALL-'), Sg.Button("Avmarkera alla",
                                                                                                    k='-NONE-')]
                    ,[Sg.Listbox(values=[], size=(65, 20), enable_events=True, k='-COL-',
                                                           select_mode=Sg.LISTBOX_SELECT_MODE_MULTIPLE)],
                   [Sg.Slider(range=(1, 100), resolution=1, orientation='h', k='-DATA WINDOW SIZE-',
                              tooltip="Välj storlek på datafönster", default_value=100),
                    Sg.Slider(range=(0, 100), resolution=1, orientation='h', k='-DATA WINDOW POSITION-',
                              tooltip="Välj datafönstrets position", default_value=0)],
                    [Sg.Button("Visa plot", key='-SHOW PLOT-'), Sg.Text("Spara plot som:"),
                     Sg.Combo(values=['pdf'], default_value='pdf', readonly=True, enable_events=False,
                              key='-PLOT FILE TYPE-'), Sg.Button("Ok", key='-SAVE PLOT AS-'),
                     Sg.Text("Spara data som:"),
                     Sg.Combo(values=['excel', 'text', 'html'], default_value='excel', enable_events=False,
                              readonly=True, key='-FILE TYPE-'), Sg.Button('Ok', key='-EXPORT FILE-')]]
    window = Sg.Window("Main window", main_layout)
    while True:
        global rows, start, stop, df
        event, values = window.read()
        if event == Sg.WINDOW_CLOSED:
            break
        elif event == "-SHOW PLOT-":
            try:
                my_plot(df.iloc[int(start):int(stop), :], values['-COL-'])
            except (NameError, TypeError) as err:
                Sg.PopupOK("Ingen data vald. \nError: {}".format(err), title="Ingen data")
        elif event == "-DATA WINDOW POSITION-":
            rows = df.shape[0]
            start = values['-DATA WINDOW POSITION-'] * rows // 100
        elif event == "-DATA WINDOW SIZE-":
            rows = df.shape[0]
            stop = start + values['-DATA WINDOW SIZE-'] * rows // 100
        elif event == '-FILE-':
            try:
                file = values['-FILE-']
                t = time.process_time()
                df = file_to_df(file)
                elapsed_time = time.process_time() - t
                print("Processen tog totalt: ", elapsed_time, "s")
                window['-COL-'].Update(values=df.columns.values.tolist())
                rows = df.shape[0]
                stop = start + values['-DATA WINDOW SIZE-'] * rows // 100
                start = values['-DATA WINDOW POSITION-'] * rows // 100
            except FileNotFoundError:
                pass
        elif event == '-EXPORT FILE-':
            try:
                export_data(values['-FILE TYPE-'], df, values['-COL-'], 'testfil')
            except (NameError, TypeError) as err:
                Sg.PopupOK("Ingen data vald. \nError: {}".format(err), title="Ingen data")
        elif event == '-SAVE PLOT AS-':
            # print(df.columns)
            try:
                plot_to_file(values['-PLOT FILE TYPE-'], df, values['-COL-'], values['-COL-'])
            except (NameError, TypeError) as err:
                Sg.PopupOK("Ingen data vald. \nError: {}".format(err), title="Ingen data")
        elif event == '-ALL-':
            window['-COL-'].set_value(window['-COL-'].get_list_values())
        elif event == '-NONE-':
            window['-COL-'].set_value('[]')
    window.close()


main_window()
plt.show()
