# This script was made to plot data found in CSV-format measurement data files generated by PEC (tm) test equipment
# Written by Henrik Isaksson 2021-05-07
import threading

import matplotlib.pyplot as plt
import pandas as pd
import PySimpleGUI as Sg
import time
import re
import xlsxwriter

ignored_columns = ['Test', 'Cell', 'Rack', 'Shelf', 'Position', 'Cell ID', 'Load On time', 'Step Time (Seconds)']
intertek_color = '#ffc700'
# Pattern of characters allowed in file naming, used with regular expression (re)
name_pattern = '[^a-öA-Ö0-9_]'
work_folder = ''
df_data = pd.DataFrame
df_start = pd.DataFrame
df_context = pd.DataFrame
start = stop = pos = size = rows = 0
reason_codes = {1: 'DeltaV', 2: 'DeltaT', 3: 'EndEvent', 4: 'NewEvent', 5: 'Deltatal', 6: 'VEnd', 7: 'TEnd', 8: 'MEnd',
                9: 'DMAEnd', 10: 'IEnd', 11: 'VMax', 12: 'VMin', 13: 'VCharge', 14: 'AHCharge', 15: 'AHDisChg',
                16: 'Pause', 17: 'MaxPower', 18: 'PIError', 19: 'TPowerMOSFET', 20: 'TShunt50A', 21: 'TShunt5A',
                22: 'T24VMOSFET', 23: 'T96VMOSFET', 24: 'TDishchrMOSFET', 25: 'Ilim', 26: 'TestEnd', 27: 'TempMin',
                28: 'TempMax', 29: 'PllFailure', 30: 'AuxData', 31: 'DCRes', 32: 'ACRes', 33: 'PowerUp', 34: 'OError',
                35: 'HCError', 36: 'CCError', 37: 'ACResFailure', 38: 'FCBOffError', 39: 'ICBOffError',
                40: 'CEIDIError',
                42: 'CEIDKeepAliveError', 100: 'VauxMax', 101: 'VauxMin',  102: 'EndDeltaV', 103: 'TimeChargeEnd',
                104: 'TimeDischargeEnd', 105: 'CellVoltMin', 106: 'CellVoltMax'
                , 107: 'CurrentDischargeEnd', 108: 'PreassureMax', 109: 'TempIncrease', 110: 'TestTempReached',
                111: 'DeltaVpositive', 112: 'DeltaVnegative', 114: 'Balanced', 113: 'UnBalanced', 115: 'CVMax',
                116: 'CVMin', 117: 'VMin_StdCycle',
                118: 'CellVoltMin_StdCycle', 119: 'VMin_C_20',
                120: 'CellVoltMin_C_20'}


# Locate first row of measurement data to be extracted
def find_rows(file):
    row_index = 0
    sections = {'indices'
                : [], 'index': ''}
    with open(file, 'r') as cf:
        while True:
            line = cf.readline()
            print(line)
            if row_index == 0:
                prev_size = len(line.split(','))
            if 'POSITION' in line and 'END' not in line:
                pass
            elif ',' not in line:
                pass
                # print('Does not contain ,: {}'.format(line))
            elif 'Current (' in line:  # or 'CMC_01_TModul_01' in line:
                print('Data row: {}'.format(line))
                sections['indices'].append(row_index)
                for x in line.split(','):
                    if 'Total Time' in x:
                        sections['index'] = x
                        print(sections)
                        return sections
            elif len(line.split(',')) != prev_size:
                sections['indices'].append(row_index)
                prev_size = len(line.split(','))
                print('New section: {}'.format(line))
            row_index += 1


# POSITION CONTEXT LOG
# END POSITION CONTEXT LOG

# Read CVS-file into DataFrame df
def file_to_df(_csv_file):
    global df_data, df_start, df_context
    sections = find_rows(_csv_file)
    # print(sections)
    if len(sections['indices']) > 1:
        df_start = pd.read_csv(_csv_file, skiprows=lambda x: x >= (sections['indices'][0]), squeeze=True, header=None)
        df_context = pd.read_csv(_csv_file, skiprows=(lambda x: x in range(0, sections['indices'][0])
                                                                or x >= sections['indices'][1]),
                                 header=None)
        # print("df_comment: {}".format(df_comment))
        # print("df_start: {}".format(df_start.values))
    else:
        # print("TRUE")
        df_start = pd.read_csv(_csv_file, nrows=sections['indices'][0], squeeze=True, header=None)
        #df_start = df_start.columns['ReasonCode']

        # print("df_start: {}".format(df_start))
    df_data = pd.read_csv(_csv_file, skiprows=(sections['indices'][-1]), index_col=sections['index'],
                          usecols=lambda x: x not in ignored_columns)
    df_data['ReasonCode Name'] = ([reason_codes[x] for x in df_data['ReasonCode']])
    print(df_data['ReasonCode Name'])
    df_data.rename(columns=lambda x: re.sub("\(", "[", re.sub("\)", "]", x)), inplace=True)
    return df_data, df_start, df_context


def unit_list(x):
    if "[" in x:
        result = x.split("[")[1].split("]")[0]
    else:
        result = "Na"
    return result


def count_units(units):
    unit = units[0]
    n = 1
    for x in units[1:]:
        if x != unit:
            n += 1
            unit = x
    return n


def my_plot(_df, data):
    _df[data].plot(style='.-')
    plt.xticks(rotation=45)
    plt.legend(bbox_to_anchor=(1.0, 1.0))
    plt.tight_layout()
    plt.show()


def slice_it(units):
    slice_list = []
    nu = 1
    beg = 0
    u = units[0]
    for i in range(len(units)):
        unit = units[i]
        if unit != u:
            u = unit
            nu += 1
            if nu == 3:
                print("Three units detected, current unit: {}".format(unit))
                slice_list.append(slice(beg, i))
                beg = i
                nu = 1
    if beg <= (len(units) - 1):
        slice_list.append(slice(beg, len(units)))
    return slice_list


def multiplot(_df, data, style_, save, filetype):
    plt.close()
    units = list(map(unit_list, data))  # List of data units
    slice_list = slice_it(units) # Data slices with two units each
    total_nu = count_units(units)  # Total number of unique units in data
    plot_left_adjust = 0.1
    plot_right_adjust = 0.90
    if total_nu <= 2:
        _df[data].plot(subplots=True, figsize=(15, 8), style=style_)
        plt.subplots_adjust(left=plot_left_adjust, right=plot_right_adjust)
        plt.legend(bbox_to_anchor=(1.0, 1.0))
        plt.xticks(rotation=45)
        plt.tight_layout()
    else:
        fig, axs = plt.subplots(nrows=((total_nu // 2) + (1 if (total_nu % 2) != 0 else 0)), ncols=1, figsize=(18, 8))
        plt.subplots_adjust(left=plot_left_adjust, right=plot_right_adjust)
        for j in range(len(axs)):
            ax_ = axs[j]
            data_slice = data[slice_list[j]]
            left_unit = re.sub(']', '', data_slice[0].split('[')[-1])
            right_unit = re.sub(']', '', data_slice[-1].split('[')[-1])
            #print(right_unit)
            right_data = [x for x in data_slice if left_unit not in x]
            _df[data[slice_list[j]]].plot(ax=ax_, secondary_y=right_data, legend=False)
            lines1, labels1 = ax_.get_legend_handles_labels()
            if hasattr(ax_, 'right_ax'):
                lines2, labels2 = ax_.right_ax.get_legend_handles_labels()
                ax_.right_ax.set_ylabel(right_unit)
                ax_.right_ax.legend(lines1 + lines2, labels1 + labels2)
            else:
                lines, labels = ax_.get_legend_handles_labels()
                ax_.legend(lines, labels)
            ax_.set_ylabel(left_unit)
            #print(ax_)
            #print(data[slice_list[j]])
    if save:
        plt.savefig(data[0] + "." + filetype, format=filetype)
    else:
        plt.show()


# Single axis
def plot_to_file(filetype, _df, data, filename):
    _df[data].plot(style='.-')
    plt.xticks(rotation=45)
    plt.legend(bbox_to_anchor=(1.0, 1.0))
    plt.tight_layout()
    plt.savefig(data[0] + "." + filetype, format=filetype)
    plt.close()


def export_data(window, filetype, df_data_, data, filename):
    start_row = df_start.shape[0] + 3
    tic = time.process_time()
    if filetype == "excel":
        filename = filename + '.xlsx'
        writer = pd.ExcelWriter(filename, engine='xlsxwriter')  # , options={'constant_memory': True})
        #df_start[0].to_excel(writer, sheet_name='Data', index=False, header=False)
        print(df_start.iloc[:, [0]])
        df_data_[data].to_excel(writer, sheet_name='Data', startcol=0, startrow=start_row, header=True)
        workbook = writer.book
        worksheet = writer.sheets['Data']
        header_format = workbook.add_format({'bold': True, 'valign': 'top',
                                             'fg_color': intertek_color,
                                             'border': 0, 'align': 'center'})
        header_format.set_text_wrap()
        worksheet.set_column(0, 0, len(df_data_[data].index.name))
        j = 0

        for i in [df_data_[data].index.name] + df_data_[data].columns.tolist():
            split = i.split('[')
            if len(split) > 1:
                text = split[0] + '\n[' + split[-1]
            else:
                text = i
            worksheet.write(start_row, j, text, header_format)
            worksheet.set_column(j, j, len(split[0]) + 1)
            j += 1
        writer.save()
    elif filetype == "text":
        filename = filename + '.txt'
        string_ = df_data_[data].to_string()
        with open(filename, 'w') as f:
            f.write(string_)
    elif filetype == 'html':
        filename = filename + '.html'
        html = df_data_[data].to_html()
        with open(filename, 'w') as f:
            f.write(html)
    toc = time.process_time()
    window.write_event_value('-EXPORT DONE-', "Exporten tog: {} sekunder".format(toc - tic))


def busy_window(max):
    layout_ = [[Sg.ProgressBar(max, orientation='h', size=(15, 4), k='-PROGRESS BAR-')]]
    return Sg.Window(title="Detta kan ta en liten stund..", layout=layout_)


def main_window():
    global df_data
    right_column = [[Sg.Table(values=[[' ', ' ']], headings=['Variabel', 'Värde'], k='-DESCRIPTION-',
                                      col_widths=[25, 25], justification='left', auto_size_columns=False, size=(50, 17))]]
                    #[Sg.Table(values=['', '', ''], k='-COMMENT-',
                     #         col_widths=[25, 25], justification='left',
                      #        auto_size_columns=False)]]  # [Sg.Multiline( k="-DESCRIPTION-", size=(60, 20), enable_events=False, justification='left')]]
    left_column = [[Sg.Text("Datakolumner"), Sg.Button("Markera alla", k='-ALL-'), Sg.Button("Avmarkera alla",
                                                                                             k='-NONE-')],
                   [Sg.Listbox(values=[], size=(50, 20), enable_events=True, k='-COL-',
                               select_mode=Sg.LISTBOX_SELECT_MODE_MULTIPLE)],
                   [Sg.Text("Urval av data: ")],  # [Sg.Checkbox('Procentuellt', k='-PROCENT-', enable_events=True),
                   #  Sg.Checkbox('Cykler', '-CYCLES-', enable_events=True)],
                   [Sg.Slider(range=(1, 100), resolution=1, orientation='h', k='-DATA WINDOW SIZE-',
                              tooltip="Välj storlek på datafönster", default_value=100, enable_events=True),
                    Sg.Slider(range=(0, 100), resolution=1, orientation='h', k='-DATA WINDOW POSITION-',
                              tooltip="Välj datafönstrets position", default_value=50, enable_events=True)]]
    main_layout = [[Sg.Text("Öppna CSV-fil"), Sg.Input(key='-FILE-', visible=False, enable_events=True),
                    Sg.FileBrowse(file_types=(('ALL Files', '*.csv'),),
                                  initial_folder='/home/henrik/Dokument/SBT8050 modultestning med AIOS box-TypK-CAN'),
                    Sg.Text("Arbetskatalog"), Sg.Input(key='-WORK FOLDER-', visible=True, enable_events=True),
                    Sg.FolderBrowse(
                                  initial_folder='/home/henrik/Dokument/SBT8050 modultestning med AIOS box-TypK-CAN')
                    ],
                   [Sg.Column(layout=left_column), Sg.Column(layout=right_column)],
                   [Sg.Checkbox("Rad för rad", k='-ROW BY ROW-'), Sg.Button("Visa plot", key='-SHOW PLOT-'),
                    Sg.Combo(values=['-', '.-', '.'], default_value='-', k='-PLOT STYLE-'),
                    Sg.Text("Spara plot som:"),
                    Sg.Combo(values=['pdf'], default_value='pdf', readonly=True, enable_events=False,
                             key='-PLOT FILE TYPE-'), Sg.Button("Ok", key='-SAVE PLOT AS-'),
                    Sg.Text("Spara data som:"),
                    Sg.Combo(values=['excel', 'text', 'html'], default_value='excel', enable_events=False,
                             readonly=True, key='-FILE TYPE-'), Sg.Button('Ok', key='-EXPORT FILE-'),
                    Sg.ProgressBar(1000, orientation='h', size=(15, 4), k='-PROGRESS BAR-')]]
    window = Sg.Window("Main window", main_layout)
    while True:
        global rows, pos, df_data, size, start, stop, work_folder, df_start, df_context
        event, values = window.read()
        if event == Sg.WINDOW_CLOSED:
            break
        elif event == "-SHOW PLOT-":
            try:
                #if values['-ROW BY ROW-']:
                multiplot(df_data.iloc[start:stop, :], values['-COL-'], values['-PLOT STYLE-'], False, '')
                #else:
                 #   my_plot(df_data.iloc[start:stop, :], values['-COL-'], values['-PLOT STYLE-'], False, '')
            except (NameError, TypeError) as err:
                Sg.PopupOK("Ingen data vald. \nError: {}".format(err), title="Ingen data")
        elif event == "-DATA WINDOW POSITION-":
            rows = df_data.shape[0]
            pos = round(values['-DATA WINDOW POSITION-'] * rows // 100)
            start = (lambda x: 0 if x < 0 else x)(int(pos - size / 2))
            stop = (lambda x: rows if x > rows else x)(int(pos + size / 2))
        elif event == "-DATA WINDOW SIZE-":
            rows = df_data.shape[0]
            size = round(values['-DATA WINDOW SIZE-'] * rows // 100)
            start = (lambda x: 0 if x < 0 else x)(int(pos - size / 2))
            stop = (lambda x: rows if x > rows else x)(int(pos + size / 2))
        elif event == '-FILE-':
            try:
                file = values['-FILE-']
                t = time.process_time()
                df_data, df_start, df_context = file_to_df(file)
                elapsed_time = time.process_time() - t
                window['-COL-'].Update(values=df_data.columns.values.tolist())
                window['-DESCRIPTION-'].Update(values=df_start.values.tolist())
                rows = df_data.shape[0]
                size = round(values['-DATA WINDOW SIZE-'] * rows // 100)
                pos = round(values['-DATA WINDOW POSITION-'] * rows // 100)
                start = (lambda x: 0 if x < 0 else x)(int(pos - size / 2))
                stop = (lambda x: rows if x > rows else x)(int(pos + size / 2))
            except FileNotFoundError:
                pass
        elif event == '-EXPORT FILE-':
            if work_folder == '':
                Sg.popup_error('Ingen arbetskatalog vald.')
            else:
                threading.Thread(target=export_data, args=(window, values['-FILE TYPE-'], df_data.iloc[start:stop, :],
                                                       values['-COL-'], (work_folder + '/'+'testfil'),), daemon=True).start()
        elif event == '-SAVE PLOT AS-':
            if work_folder == '':
                Sg.popup_error('Ingen arbetskatalog är vald.')
            else:
                try:
                    #if values['-ROW BY ROW-']:
                    multiplot(values['-PLOT FILE TYPE-'], df_data.iloc[start:stop, :],
                    values['-COL-'], values['-COL-'], True, values['-PLOT FILE TYPE'])
                except (NameError, TypeError) as err:
                    Sg.PopupOK("Ingen data vald. \nError: {}".format(err), title="Ingen data")
        elif event == '-ALL-':
            window['-COL-'].set_value(window['-COL-'].get_list_values())
        elif event == '-NONE-':
            window['-COL-'].set_value('[]')
        elif event == '-EXPORT DONE-':
            print(values['-EXPORT DONE-'])
        elif event == '-PROCENT-':
            # window['-CYCLES-'].Update(disabled=False)
            pass
        elif event == '-WORK FOLDER-':
            work_folder = values['-WORK FOLDER-']
        # elif event == '-CYCLES-':
        #    window['-PROCENT-'].Update(disabled=False)
    window.close()


# window_ = busy_window(1000)
# events, values = window_.read()
# window_.close()


main_window()
# plt.show()
